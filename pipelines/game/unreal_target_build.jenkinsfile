def ColorFromBuildResult(result){
    if("${result}" == 'SUCCESS') return '#18A558'
    if("${result}" == 'ABORTED') return '#6e6e6e'
    if("${result}" == 'UNSTABLE') return '#fcba03'
    return '#FF0000'
}

pipeline {
    agent {
        node {
            label ""
            customWorkspace "$BUILD_DIR"
        }
    }

    /* environment {
        BUILD_DIR = 'c:\\JenkinsJobs\\TPS-target-pipeline'
        GIT_URL_GAME = 'https://github.com/life-exe/UnrealTPSGame'
        GIT_CREDENTIALS_GAME = 'life-exe-github'
        GIT_BRANCH_GAME = 'master'
        GIT_CLONE_TIMEOUT_MIN = 60
        UAT_PATH = 'C:\\Epic Games\\UE Binary\\UE_5.0\\Engine\\Build\\BatchFiles\\RunUAT.bat'
        ANDROID_INSTALL_PATH = 'D:\\JenkinsJobs\\UnrealOculus\\Engine\\Extras\\Android\\SetupAndroid.bat'
        PROJECT_PATH = "$BUILD_DIR\\TPS.uproject"
        // ARCHIVE_PATH = "c:\\JenkinsJobs\\Artifacts\\$JOB_NAME\\$BUILD_NUMBER"
        ARCHIVE_PATH = "$BUILD_DIR\\Build"
        BUILD_FLAGS = '-build -cook -package -stage -archive -pak -allmaps' // -server -client -noclient
        ZIP_DIR = "Build\\**\\*.*"
        SLACK_CHANNEL = 'tps-game-builds'
        PLATFORM = 'Win64' // ['Android', 'Linux'..]
        CONFIG = 'Development' // ['Development', 'Shipping', 'DebugGame']
        VERSION_MAJOR = "1"
        VERSION_MINOR = "0"
        VERSIONBATCHER = "$BUILD_DIR\\Script\VersionBatcher.bat"
        BUCKETNAME = ""
        DESTINATION_FOLDER = ""
    }*/

    stages {
        stage('Git clone') {
            steps {
                slackSend channel: "$SLACK_CHANNEL",
                    color: "$currentBuild.previousBuild" == 'null' ? '#18A558' :
                    ColorFromBuildResult("$currentBuild.previousBuild.result"),
                    message:"Build started: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

                checkout([$class: 'GitSCM',
                    branches: [[name: "$GIT_BRANCH_GAME"]],
                    extensions: [
                        [$class: 'GitLFSPull'],
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"],
                        [$class: 'CheckoutOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"]
                    ],
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIALS_GAME",
                    url: "$GIT_URL_GAME"]]])
            }
        }
        stage('Build') {
            steps {
                bat '''
                    "%VERSIONBATCHER%" -version="%VERSION_MAJOR%.%VERSION_MINOR%.%BUILD_NUMBER%"
                '''
                bat '''
                    "%ANDROID_INSTALL_PATH%"
                '''
                bat '''
                    "%UAT_PATH%" BuildCookRun ^
                    -project="%PROJECT_PATH%" ^
                    -platform="%PLATFORM%" ^
                    -cookflavor=ASTC ^
                    -clientconfig="%CONFIG%" ^
                    -serverconfig="%CONFIG%" ^
                    -archivedirectory="%ARCHIVE_PATH%" ^
                    %BUILD_FLAGS% -noturnkeyvariables
                '''
            }
        }
        stage('Archive artifacts') {
            steps {
                archiveArtifacts artifacts: "$ZIP_DIR"
            }
        }
        stage('Retrieve Artifacts') {
            steps {
                script {
                    def artifactPath = build.getArtifactManager().root().child("$ZIP_DIR").getRemote()
                    echo "Path to ZIP file: ${artifactPath}"
                    env.ZIP_FILE_PATH = artifactPath // Store the artifact path in an environment variable for later use
                }
            }
        }
        stage('Upload to AWS') {
              steps {
                  withAWS(region:'eu-north-1',credentials:'jenkins-cred') {
                  sh 'echo "Uploading content with AWS creds"'
                      s3Upload(pathStyleAccessEnabled: true, payloadSigningEnabled: true, file: env.ZIP_FILE_PATH, bucket:'%BUCKETNAME%', path: '%DESTINATION_FOLDER%')
                  }
              }
         }
    }

    post {
        always {
            slackSend channel: "$SLACK_CHANNEL",
                color: ColorFromBuildResult("$currentBuild.currentResult"),
                message:"Build $currentBuild.currentResult: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }
}
