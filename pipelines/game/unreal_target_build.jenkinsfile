def WITH_DISTRIBUTION = ""
def NOTIFIER_TEXT = ""
def VERSION_PATCH = ""
def VERSIONSTRING = ""
def VERSIONSTRINGFLAT = ""
def GENERATEPATCHFROMVERSION = ""

pipeline {
    agent {
        node {
            label ""
            customWorkspace "$BUILD_DIR"
        }
    }

    /* environment {
        BUILD_DIR = 'c:\\JenkinsJobs\\TPS-target-pipeline'
        GIT_URL_GAME = 'https://github.com/life-exe/UnrealTPSGame'
        GIT_CREDENTIALS_GAME = 'life-exe-github'
        GIT_BRANCH_GAME = 'master'
        GIT_CLONE_TIMEOUT_MIN = 60
        UAT_PATH = 'C:\\Epic Games\\UE Binary\\UE_5.0\\Engine\\Build\\BatchFiles\\RunUAT.bat'
        ANDROID_INSTALL_PATH = 'D:\\JenkinsJobs\\UnrealOculus\\Engine\\Extras\\Android\\SetupAndroid.bat'
        PROJECT_PATH = "$BUILD_DIR\\TPS.uproject"
        OVR_UTIL = 'D:\\Lib\\OVRUtil\\Util.exe'
        APP_NAME = AppName
        APP_PREFIX = com.Company
        OCULUS_APP_ID = 1234123412
        OCULUS_APP_SECRET = dce3cd
        OCULUS_CHANNEL = ALPHA
        // ARCHIVE_PATH = "c:\\JenkinsJobs\\Artifacts\\$JOB_NAME\\$VERSION_PATCH"
        ARCHIVE_PATH = "$BUILD_DIR\\Build"
        BUILD_FLAGS = '-build -cook -package -stage -archive -pak -allmaps' // -server -client -noclient
        ZIP_DIR = "Build\\**\\*.*"
        SLACK_CHANNEL = 'tps-game-builds'
        PLATFORM = 'Win64' // ['Android', 'Linux'..]
        CONFIG = 'Development' // ['Development', 'Shipping', 'DebugGame']
        VERSIONBATCHER = "$BUILD_DIR\\Script\VersionBatcher.bat"
        BUCKETNAME = ""
        DESTINATION_FOLDER = ""
        DISCORD_HOOK = "url"
        FTP_REMOTE_DIR = "SomDir/Dir"
        PATCHGENERATOR = "$BUILD_DIR\\PatchSystem\\Admin\\MHLab.Patch.Admin.exe"
    }*/

    parameters {
                choice(
                    choices: ['Win64+Android', 'Android', 'Win64' ], 
                    name: 'PLATFORM'
                )
                choice(
                    choices: ['Shipping', 'Development', 'DebugGame' ], 
                    name: 'CONFIG'
                )
                string(
                    defaultValue: 'code', 
                    name: 'GIT_BRANCH_GAME', 
                    trim: true
                )
                string(
                    name: 'VERSION_MAJOR', 
                    defaultValue: params.VERSION_MAJOR ? params.VERSION_MAJOR : '1', 
                    trim: true
                )
                string(
                    name: 'VERSION_MINOR', 
                    defaultValue: params.VERSION_MINOR ? params.VERSION_MINOR : '0',
                    trim: true
                )
                booleanParam(
                    defaultValue: false, 
                    description: 'Ignore sending any build statuses to Discrod, Slack, etc...', 
                    name: 'SILENT_MODE'
                )
                booleanParam(
                    defaultValue: true,
                    description: 'Make Archive and Artifact, will be auto enabled, when Upload to AWS', 
                    name: 'NEED_ARCHIVE'
                )
                booleanParam(
                    defaultValue: false, 
                    description: 'Upload build to AWS S3?', 
                    name: 'Upload_TO_AWS'
                )
                booleanParam(
                    defaultValue: true, 
                    description: 'Upload build to Oculus', 
                    name: 'Upload_To_Oculus'
                )
                booleanParam(
                    defaultValue: true,
                    description: 'Sign app by keystore?',
                    name: 'DISTRIBUTION'
               )
               booleanParam(
                    defaultValue: true,
                    description: 'Should generate patch build for spectator',
                    name: 'GeneratePatchBuild'
               )
               string(
                    defaultValue: params.GeneratePatchFrom ? params.GeneratePatchFrom : '', 
                    name: 'GeneratePatchFrom', 
                    trim: true
               )
               string(
                    defaultValue: params.SubstructPatchNumberBy ? params.SubstructPatchNumberBy : '0', 
                    name: 'SubstructPatchNumberBy', 
                    trim: true
               )
            }

    stages {
        stage('Clear Build Folder'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    bat '''
                        rmdir /S /Q Build
                    '''
                }
            }
        }
        stage('Git clone') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.GIT_BRANCH_GAME}"]],
                    extensions: [
                        [$class: 'GitLFSPull'],
                        [$class: 'CloneOption', timeout: "$GIT_CLONE_TIMEOUT_MIN", shallow: true],
                        [$class: 'CheckoutOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"]
                    ],
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIALS_GAME",
                    url: "$GIT_URL_GAME"]]])
            }
        }
        stage('Prepare') {
            steps {
                script{
                    def BuildInt = BUILD_NUMBER as int
                    def SubstructInt = params.SubstructPatchNumberBy as int

                    env.VERSION_PATCH = BuildInt - SubstructInt
                    env.VERSIONSTRING = params.VERSION_MAJOR + "." + params.VERSION_MINOR + "." + env.VERSION_PATCH
                    env.VERSIONSTRINGFLAT = params.VERSION_MAJOR + "" + params.VERSION_MINOR + "" + env.VERSION_PATCH

                    bat '''
                    "%VERSIONBATCHER%" -version="%VERSIONSTRING%"
                    '''
                    bat '''
                        "%ANDROID_INSTALL_PATH%"
                    '''
                }
                
            }
        }
        stage('Build'){
            steps {
                script {
                    if (params.DISTRIBUTION == true){
                        env.WITH_DISTRIBUTION = " -distribution"
                    }
                    bat '''
                        "%UAT_PATH%" BuildCookRun ^
                        -project="%PROJECT_PATH%" ^
                        -platform="%PLATFORM%" ^
                        -cookflavor=ASTC ^
                        -clientconfig="%CONFIG%" ^
                        -serverconfig="%CONFIG%" ^
                        -archivedirectory="%ARCHIVE_PATH%" ^
                        %BUILD_FLAGS%%WITH_DISTRIBUTION% -noturnkeyvariables
                    '''
                }
            }
        }
        stage('Clean and Move(Android)'){
            when {
                expression { 
                   return (params.PLATFORM == 'Android' || params.PLATFORM == 'Win64+Android')
                }
            }
            steps {
                bat '''
                    cd Build
                    cd Android_ASTC
                    move *.obb ..
                    move *.apk ..
                '''
                bat '''
                    rmdir /S /Q Build\\Android
                    rmdir /S /Q Build\\Android_ASTC
                '''
            }
        }
        stage('Clean and Move(Windows)'){
            when {
                expression { 
                   return (params.PLATFORM == 'Win64' || params.PLATFORM == 'Win64+Android')
                }
            }
            steps {
                bat '''
                    cd Build
                    ren WindowsNoEditor Spectator
                    cd ..
                '''
            }
        }
        stage('Archive artifacts') {
            when {
                expression { 
                    return (params.Upload_To_Oculus || params.NEED_ARCHIVE )
                }
            }
            steps {
                zip zipFile: "Archive/${env.VERSIONSTRING}.zip", archive: false, dir: 'Build'
                archiveArtifacts artifacts: "Archive/${env.VERSIONSTRING}.zip", fingerprint: true, onlyIfSuccessful: true
            }
        }
        stage('Upload to Oculus') {
            when {
                expression { 
                    return params.Upload_To_Oculus == true
                }
            }
            steps {
                bat '''
                        "%OVR_UTIL%" upload-quest-build ^
                        --app_id %OCULUS_APP_ID% ^
                        --app_secret %OCULUS_APP_SECRET% ^
                        --apk Build/%APP_NAME%-Android-Shipping-arm64.apk ^
                        --obb Build/main.%VERSIONSTRINGFLAT%.%APP_PREFIX%.%APP_NAME%.obb ^
                        --channel %OCULUS_CHANNEL%
                '''
            }
        }
        stage('Generate patch build') {
            when {
                expression { 
                    return params.GeneratePatchBuild == true
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    bat '''
                        rmdir /S /Q PatchSystem\\Admin\\App
                    '''
                    bat '''
                        robocopy /s "Build\\Spectator" "PatchSystem\\Admin\\App" -e
                    '''
                }
                bat '''
                    "%PATCHGENERATOR%" build -b %VERSIONSTRING%
                '''
            }
        }
        stage('Generate patch') {
            when {
                expression { 
                    return params.GeneratePatchFrom != ''
                }
            }
            steps {
                script{
                    env.GENERATEPATCHFROMVERSION = params.GeneratePatchFrom;
 
                    bat '''
                        "%PATCHGENERATOR%" patch --from %GENERATEPATCHFROMVERSION% --to %VERSIONSTRING%
                    '''
                }
            }
        }
        stage('Upload patch builds to FTP') {
            when {
                expression {
                    return params.GeneratePatchBuild == true
                }
            }
            steps {
                ftpPublisher alwaysPublishFromMaster: false,
                             continueOnError: false,
                             failOnError: false,
                             masterNodeName: '',
                             paramPublish: null,
                             publishers: [[configName: 'XRBody FTP Server', transfers: [[asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "${FTP_REMOTE_DIR}", remoteDirectorySDF: false, removePrefix: "PatchSystem/Admin", sourceFiles: "PatchSystem/Admin/Builds/**"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]]

            }
        }
        stage('Upload patch to FTP') {
            when {
                expression {
                    return params.GeneratePatchFrom != ''
                }
            }
            steps {
                ftpPublisher alwaysPublishFromMaster: false,
                             continueOnError: false,
                             failOnError: false,
                             masterNodeName: '',
                             paramPublish: null,
                             publishers: [[configName: 'XRBody FTP Server', transfers: [[asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "${FTP_REMOTE_DIR}", remoteDirectorySDF: false, removePrefix: "PatchSystem/Admin", sourceFiles: "PatchSystem/Admin/Patches/**"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]]

            }
        }
        stage('Upload to AWS') {
            when {
                expression { 
                    return params.Upload_TO_AWS == true
                }
            }
            steps {
                s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: '${BUCKETNAME}/${DESTINATION_FOLDER}', excludedFile: '', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: true, selectedRegion: 'eu-north-1', showDirectlyInBrowser: false, sourceFile: "Archive/${env.VERSIONSTRING}.zip", storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'vrsim', userMetadata: []
            }
        }
        stage('Send Notifiers'){
            when {
                expression { 
                   return params.SILENT_MODE == false
                }
            }
            steps{
                script {
                    env.NOTIFIER_TEXT = "";
                    if (params.Upload_TO_AWS == true){
                        env.NOTIFIER_TEXT += "Path: ${DESTINATION_FOLDER}/${env.VERSIONSTRING}.zip"
                        if (params.Upload_To_Oculus == true || params.GeneratePatchBuild == true || params.GeneratePatchFrom != ''){
                            env.NOTIFIER_TEXT += "\n"
                        }
                    }
                    if (params.GeneratePatchBuild == true){
                        env.NOTIFIER_TEXT += "Build for spectator uploaded to FTP"
                        if (params.Upload_To_Oculus == true || params.GeneratePatchFrom != ''){
                            env.NOTIFIER_TEXT += "\n"
                        }
                    }
                    if (params.GeneratePatchFrom != ''){
                        env.NOTIFIER_TEXT += "Patch Generated for spectator uploaded to FTP"
                        if (params.Upload_To_Oculus == true){
                            env.NOTIFIER_TEXT += "\n"
                        }
                    }
                    if (params.Upload_To_Oculus == true){
                        env.NOTIFIER_TEXT += "Oculus uploaded to channel: ${OCULUS_CHANNEL}"
                    }

                    discordSend description: "${env.NOTIFIER_TEXT}", footer: "Duration: ${currentBuild.durationString.replace(' and counting', '')}", image: '', link: '', result: 'SUCCESS', scmWebUrl: '', showChangeset: false, thumbnail: '', title: "${env.JOB_NAME}[${env.VERSIONSTRING}] -> Build FINISHED", webhookURL: "${DISCORD_HOOK}"
                }
            }
        }
    }
}
