pipeline {
    agent {
        node {
            label ""
            customWorkspace "$BUILD_DIR"
        }
    }

    /* environment {
        BUILD_DIR = 'c:\\JenkinsJobs\\TPS-target-pipeline'
        GIT_URL_GAME = 'https://github.com/life-exe/UnrealTPSGame'
        GIT_CREDENTIALS_GAME = 'life-exe-github'
        GIT_BRANCH_GAME = 'master'
        GIT_CLONE_TIMEOUT_MIN = 60
        UAT_PATH = 'C:\\Epic Games\\UE Binary\\UE_5.0\\Engine\\Build\\BatchFiles\\RunUAT.bat'
        ANDROID_INSTALL_PATH = 'D:\\JenkinsJobs\\UnrealOculus\\Engine\\Extras\\Android\\SetupAndroid.bat'
        PROJECT_PATH = "$BUILD_DIR\\TPS.uproject"
        // ARCHIVE_PATH = "c:\\JenkinsJobs\\Artifacts\\$JOB_NAME\\$BUILD_NUMBER"
        ARCHIVE_PATH = "$BUILD_DIR\\Build"
        BUILD_FLAGS = '-build -cook -package -stage -archive -pak -allmaps' // -server -client -noclient
        ZIP_DIR = "Build\\**\\*.*"
        SLACK_CHANNEL = 'tps-game-builds'
        PLATFORM = 'Win64' // ['Android', 'Linux'..]
        CONFIG = 'Development' // ['Development', 'Shipping', 'DebugGame']
        VERSION_MAJOR = "1"
        VERSION_MINOR = "0"
        VERSIONBATCHER = "$BUILD_DIR\\Script\VersionBatcher.bat"
        BUCKETNAME = ""
        DESTINATION_FOLDER = ""
        DISCORD_HOOK = "url"
    }*/

    stages {
        stage('Setup parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            choice(
                                choices: ['Win64+Android', 'Android', 'Win64' ], 
                                name: 'PLATFORM',
                            ),
                            choice(
                                choices: ['Shipping', 'Development', 'DebugGame' ], 
                                name: 'CONFIG',
                            ),
                            booleanParam(
                                defaultValue: false, 
                                description: 'Ignore sending any build statuses to Discrod, Slack, etc...', 
                                name: 'SILENT_MODE'
                            ),
                            booleanParam(
                                defaultValue: true, 
                                description: 'Upload build to AWS S3?', 
                                name: 'Upload_TO_AWS'
                            ),
                            booleanParam(
                                defaultValue: true, 
                                description: 'Sign app by keystore?', 
                                name: 'Distribution'
                            ),
                            string(
                                defaultValue: 'code', 
                                name: 'GIT_BRANCH_GAME', 
                                trim: true
                            )
                        ])
                    ])
                }
            }
        }
        stage('Clear Build Folder'){
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    bat '''
                        rmdir /S /Q Build
                    '''
                }
            }
        }
        stage('Git clone') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "${params.GIT_BRANCH_GAME}"]],
                    extensions: [
                        [$class: 'GitLFSPull'],
                        [$class: 'CloneOption', timeout: "$GIT_CLONE_TIMEOUT_MIN", shallow: true],
                        [$class: 'CheckoutOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"]
                    ],
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIALS_GAME",
                    url: "$GIT_URL_GAME"]]])
            }
        }
        stage('Prepare') {
            steps {
                bat '''
                    "%VERSIONBATCHER%" -version="%VERSION_MAJOR%.%VERSION_MINOR%.%BUILD_NUMBER%"
                '''
                bat '''
                    "%ANDROID_INSTALL_PATH%"
                '''
            }
        }
        stage('Build'){
            steps {
                script {
                    env.WITH_DISTRIBUTION = params.DISTRIBUTION == true ? '-distribution ' : ''
                    bat '''
                        "%UAT_PATH%" BuildCookRun ^
                        -project="%PROJECT_PATH%" ^
                        -platform="%PLATFORM%" ^
                        -cookflavor=ASTC ^
                        -clientconfig="%CONFIG%" ^
                        -serverconfig="%CONFIG%" ^
                        -archivedirectory="%ARCHIVE_PATH%" ^
                        %BUILD_FLAGS%%WITH_DISTRIBUTION% -noturnkeyvariables
                    '''
                }
            }
        }
        stage('Clean'){
            when {
                expression { 
                   return (params.PLATFORM == 'Android' || params.PLATFORM == 'Win64+Android')
                }
            }
            steps {
                bat '''
                    rmdir /S /Q Build\\Android
                '''
            }
        }
        stage('Archive artifacts') {
            steps {
                zip zipFile: "Archive/${VERSION_MAJOR}.${VERSION_MINOR}.${BUILD_NUMBER}.zip", archive: false, dir: 'Build'
                archiveArtifacts artifacts: "Archive/${VERSION_MAJOR}.${VERSION_MINOR}.${BUILD_NUMBER}.zip", fingerprint: true, onlyIfSuccessful: true
            }
        }
        stage('Upload to AWS') {
            when {
                expression { 
                    return params.Upload_TO_AWS == true
                }
            }
            steps {
                s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: '${BUCKETNAME}/${DESTINATION_FOLDER}', excludedFile: '', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: true, selectedRegion: 'eu-north-1', showDirectlyInBrowser: false, sourceFile: "Archive/${VERSION_MAJOR}.${VERSION_MINOR}.${BUILD_NUMBER}.zip", storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'vrsim', userMetadata: []
            }
        }
        stage('Send Notifiers'){
            when {
                expression { 
                   return params.SILENT_MODE == false
                }
            }
            steps{
                discordSend description: "Path: ${DESTINATION_FOLDER}/${VERSION_MAJOR}.${VERSION_MINOR}.${BUILD_NUMBER}.zip", footer: "Duration: ${currentBuild.durationString.replace(' and counting', '')}", image: '', link: '', result: 'SUCCESS', scmWebUrl: '', showChangeset: false, thumbnail: '', title: "${env.JOB_NAME}[${VERSION_MAJOR}.${VERSION_MINOR}.${BUILD_NUMBER}] -> Build FINISHED", webhookURL: "${DISCORD_HOOK}"                
            }
        }
    }
}
